<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Testing React Typescript with Jest and Enzyme</title>
    <link href="/blog/2020/04/15/testing/"/>
    <url>/blog/2020/04/15/testing/</url>
    
    <content type="html"><![CDATA[<h1 id="With-Create-React-App"><a href="#With-Create-React-App" class="headerlink" title="With Create React App"></a>With Create React App</h1><p>Create React App uses Jest as its test runner. So if you start a new Create React App project with the following commands, you can enjoy an out-of-box testing environment.<br>npx create-react-app my-app –template typescript</p><h1 id="Without-Create-React-App"><a href="#Without-Create-React-App" class="headerlink" title="Without Create React App"></a>Without Create React App</h1><p>If you set up a project simply using React, typescript, jest and webpack, you may encounter into a series of problems when running tests.</p><h2 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem 1"></a>Problem 1</h2><pre><code class="js">// need @babel/preset-env to use importSyntaxError: Cannot use import statement outside a module.// need @babel/preset-react to use react componentsSyntaxError: Unexpected token &lt;.// need @babel/preset-typescript to use type definitionsSyntaxError: Support for the experimental syntax &#39;exportDefaultFrom&#39; isn&#39;t currently enabled. export type Option = {        |        ^      6 |   label: string,      7 |   value: string      8 | }</code></pre><p>These errors occur when importing React and other modules in the XX.test.tsx file. When running “npm run dev”, we use webpack or other tools to handle all the babel transform work with the help of ts-loader. However, when we run “npm run test”, jest does not recognize all the syntaxes beyond basic javascript. Thus, we need to config babel presets for jest or simply using ts-jest.</p><h3 id="With-Ts-jest"><a href="#With-Ts-jest" class="headerlink" title="With Ts-jest"></a>With Ts-jest</h3><p>We just need to add a single config in the jest.config.js file.</p><pre><code class="js">// jest.config.jsmodule.exports = { transform: { &#39;^.+\\.tsx?$&#39;: &#39;ts-jest&#39;},}</code></pre><h3 id="With-Babel"><a href="#With-Babel" class="headerlink" title="With Babel"></a>With Babel</h3><p>we need to config related babel presets as follows:</p><pre><code class="js">// babel.config.json{  “presets”: [    [        “@babel/preset-env”,      { “targets”: { “esmodules”: true } }    ],    [“@babel/preset-react”],    [“@babel/preset-typescript”]  ]}</code></pre><h2 id="Problem-2"><a href="#Problem-2" class="headerlink" title="Problem 2"></a>Problem 2</h2><pre><code class="js">SyntaxError: Unexpected token &#39;.&#39;&gt; 1 | import &#39;./MultiCheck.css&#39;;</code></pre><p>Jest cannot parse files that are not javascript, thus we need to mock the non-JS modules with the “moduleNameMapper” config option.</p><pre><code class="js">// create a file styleMock.js for jest to handle css filesmodule.exports = {};</code></pre><p>Then add the config option.</p><pre><code class="js">// jest.config.jsmodule.exports = { transform: { &#39;^.+\\.tsx?$&#39;: &#39;ts-jest&#39; }, moduleNameMapper: { &#39;\\.(css|less)$&#39;: &#39;&lt;rootDir&gt;/styleMock.js&#39; },}</code></pre><h1 id="Using-Enzyme"><a href="#Using-Enzyme" class="headerlink" title="Using Enzyme"></a>Using Enzyme</h1><p>If you’d like to test components in isolation from the child components they render, we recommend using shallow() rendering API from Enzyme.</p><pre><code class="js">npm install — save enzyme enzyme-adapter-react-16</code></pre><p>As of Enzyme 3, you will need to install Enzyme along with an Adapter corresponding to the version of React you are using. (The examples above use the adapter for React 16.)</p><pre><code class="js">// jest.config.jsimport { configure } from &#39;enzyme&#39;;import Adapter from &#39;enzyme-adapter-react-16&#39;;configure({ adapter: new Adapter() });</code></pre><p>The adapter will also need to be configured in your global setup file:</p><pre><code class="js">// jest.config.jsmodule.exports = { transform: { &#39;^.+\\.tsx?$&#39;: &#39;ts-jest&#39; }, moduleNameMapper: { &#39;\\.(css|less)$&#39;: &#39;&lt;rootDir&gt;/styleMock.js&#39; }, setupFiles: [&#39;&lt;rootDir&gt;/jest.setup.js&#39;],}</code></pre><p>After all these configs, you should be able to test a react typecript project with jest and enzyme.</p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jest</tag>
      
      <tag>test</tag>
      
      <tag>react</tag>
      
      <tag>typescript</tag>
      
      <tag>enzyme</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
